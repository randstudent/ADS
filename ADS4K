#include <iostream>
using namespace std;

const int MAX = 100;
const int INF = 999999;

struct Edge {
    int u, v, weight;
};

int parent[MAX];

// Find function with path compression
int find(int x) {
    while (x != parent[x])
        x = parent[x];
    return x;
}

// Union function
void unionSet(int u, int v) {
    int rootU = find(u);
    int rootV = find(v);
    parent[rootU] = rootV;
}

void Kruskal(Edge edges[], int V, int E) {
    // Initialize parent array
    for (int i = 0; i < V; i++)
        parent[i] = i;

    // Sort edges using simple bubble sort
    for (int i = 0; i < E - 1; i++) {
        for (int j = 0; j < E - i - 1; j++) {
            if (edges[j].weight > edges[j + 1].weight) {
                Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }

    int totalCost = 0;

    for (int i = 0, count = 0; i < E && count < V - 1; i++) {
        int u1 = edges[i].u;
        int v1 = edges[i].v;
        int w1 = edges[i].weight;

        if (find(u1) != find(v1)) {
            unionSet(u1, v1);
            cout << u1 << " - " << v1 << " (Distance: " << w1 << ")\n";
            totalCost += w1;
            count++;
        }
    }

    cout << "Total distance (cost) of MST: " << totalCost << endl;
}

int main() {
    int V, E;
    cout << "Enter number of departments (nodes): ";
    cin >> V;
    cout << "Enter number of paths (edges): ";
    cin >> E;

    Edge edges[MAX];

    for (int i = 0; i < E; i++) {
        cout << "Enter path " << i + 1 << " (from - to - distance): ";
        cin >> edges[i].u >> edges[i].v >> edges[i].weight;
    }
    cout << "\nEdges in Minimum Spanning Tree (Kruskal's):\n";
    Kruskal(edges, V, E);

    return 0;
}
