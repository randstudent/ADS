#include <iostream>
using namespace std;

struct TreeNode {
    int keys[2];
    int keyCount;
    TreeNode* children[3];
};

class TwoThreeTree {
    TreeNode* rootNode = nullptr;

    struct SplitResult {
        TreeNode* leftNode;
        int middleKey;
        TreeNode* rightNode;
        bool didSplit;
    };

    TreeNode* createTreeNode(int key) {
        TreeNode* newNode = new TreeNode;
        newNode->keys[0] = key;
        newNode->keyCount = 1;
        for (int i = 0; i < 3; i++)
            newNode->children[i] = nullptr;
        return newNode;
    }

    bool isLeafNode(TreeNode* node) {
        return node->children[0] == nullptr;
    }

    void insertKeyInNode(TreeNode* node, int key) {
        if (node->keyCount == 1) {
            if (key < node->keys[0]) {
                node->keys[1] = node->keys[0];
                node->keys[0] = key;
            } else {
                node->keys[1] = key;
            }
            node->keyCount = 2;
        }
    }

    SplitResult insertRecursive(TreeNode* currentNode, int key) {
        if (isLeafNode(currentNode)) {
            if (currentNode->keyCount == 1) {
                insertKeyInNode(currentNode, key);
                return {nullptr, 0, nullptr, false};
            }

            TreeNode* leftNode = createTreeNode(0);
            TreeNode* rightNode = createTreeNode(0);
            int promotedKey;

            if (key < currentNode->keys[0]) {
                leftNode->keys[0] = key;
                rightNode->keys[0] = currentNode->keys[1];
                promotedKey = currentNode->keys[0];
            } else if (key > currentNode->keys[1]) {
                leftNode->keys[0] = currentNode->keys[0];
                rightNode->keys[0] = key;
                promotedKey = currentNode->keys[1];
            } else {
                leftNode->keys[0] = currentNode->keys[0];
                rightNode->keys[0] = currentNode->keys[1];
                promotedKey = key;
            }

            leftNode->keyCount = rightNode->keyCount = 1;
            return {leftNode, promotedKey, rightNode, true};
        }

        int childIndex;
        if (key < currentNode->keys[0]) childIndex = 0;
        else if (currentNode->keyCount == 1 || key < currentNode->keys[1]) childIndex = 1;
        else childIndex = 2;

        SplitResult childResult = insertRecursive(currentNode->children[childIndex], key);
        if (!childResult.didSplit) return {nullptr, 0, nullptr, false};

        if (currentNode->keyCount == 1) {
            if (childIndex == 0) {
                currentNode->keys[1] = currentNode->keys[0];
                currentNode->keys[0] = childResult.middleKey;
                currentNode->children[2] = currentNode->children[1];
                currentNode->children[0] = childResult.leftNode;
                currentNode->children[1] = childResult.rightNode;
            } else {
                currentNode->keys[1] = childResult.middleKey;
                currentNode->children[1] = childResult.leftNode;
                currentNode->children[2] = childResult.rightNode;
            }
            currentNode->keyCount = 2;
            return {nullptr, 0, nullptr, false};
        }

        TreeNode* leftNode = createTreeNode(0);
        TreeNode* rightNode = createTreeNode(0);
        int promotedKey;

        if (childIndex == 0) {
            leftNode->keys[0] = childResult.middleKey;
            leftNode->children[0] = childResult.leftNode;
            leftNode->children[1] = childResult.rightNode;

            rightNode->keys[0] = currentNode->keys[1];
            rightNode->children[0] = currentNode->children[1];
            rightNode->children[1] = currentNode->children[2];
            promotedKey = currentNode->keys[0];
        } else if (childIndex == 1) {
            leftNode->keys[0] = currentNode->keys[0];
            leftNode->children[0] = currentNode->children[0];
            leftNode->children[1] = childResult.leftNode;

            rightNode->keys[0] = currentNode->keys[1];
            rightNode->children[0] = childResult.rightNode;
            rightNode->children[1] = currentNode->children[2];
            promotedKey = childResult.middleKey;
        } else {
            leftNode->keys[0] = currentNode->keys[0];
            leftNode->children[0] = currentNode->children[0];
            leftNode->children[1] = currentNode->children[1];

            rightNode->keys[0] = childResult.middleKey;
            rightNode->children[0] = childResult.leftNode;
            rightNode->children[1] = childResult.rightNode;
            promotedKey = currentNode->keys[1];
        }

        leftNode->keyCount = rightNode->keyCount = 1;
        return {leftNode, promotedKey, rightNode, true};
    }

    void inorderTraversal(TreeNode* node) {
        if (!node) return;

        if (node->keyCount == 1) {
            if (!isLeafNode(node)) inorderTraversal(node->children[0]);
            cout << node->keys[0] << " ";
            if (!isLeafNode(node)) inorderTraversal(node->children[1]);
        } else {
            if (!isLeafNode(node)) inorderTraversal(node->children[0]);
            cout << node->keys[0] << " ";
            if (!isLeafNode(node)) inorderTraversal(node->children[1]);
            cout << node->keys[1] << " ";
            if (!isLeafNode(node)) inorderTraversal(node->children[2]);
        }
    }

public:
    void insert(int key) {
        if (!rootNode) {
            rootNode = createTreeNode(key);
            return;
        }

        SplitResult result = insertRecursive(rootNode, key);
        if (result.didSplit) {
            TreeNode* newRoot = createTreeNode(result.middleKey);
            newRoot->children[0] = result.leftNode;
            newRoot->children[1] = result.rightNode;
            rootNode = newRoot;
        }
    }

    void display() {
        inorderTraversal(rootNode);
        cout << endl;
    }
};

int main() {
    TwoThreeTree tree;
    int valuesToInsert[] = {50,14,75,32,99,8,26,35,102};
    int arraySize = sizeof(valuesToInsert) / sizeof(valuesToInsert[0]);
    
    cout<<"\nDisplay B-Tree : "<<endl;
    for (int i = 0; i < arraySize; i++) {
        tree.insert(valuesToInsert[i]);
    }    
    
    tree.display();
    return 0;
}
