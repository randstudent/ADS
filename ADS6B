#include <iostream>
#include <string>
using namespace std;

struct Node {
    string name;
    string color;
    Node* left;
    Node* right;
    Node* parent;

    Node(string dirName) {
        name = dirName;
        color = "Red";
        left = right = parent = NULL;
    }
};

class RedBlackTree {
public:
    Node* root;

    RedBlackTree() {
        root = NULL;
    }

    void leftRotate(Node* x) {
        Node* y = x->right;
        x->right = y->left;
        if (y->left != NULL)
            y->left->parent = x;

        y->parent = x->parent;

        if (x->parent == NULL)
            root = y;
        else if (x == x->parent->left)
            x->parent->left = y;
        else
            x->parent->right = y;

        y->left = x;
        x->parent = y;
    }

    void rightRotate(Node* x) {
        Node* y = x->left;
        x->left = y->right;
        if (y->right != NULL)
            y->right->parent = x;

        y->parent = x->parent;

        if (x->parent == NULL)
            root = y;
        else if (x == x->parent->right)
            x->parent->right = y;
        else
            x->parent->left = y;

        y->right = x;
        x->parent = y;
    }

    void fixInsert(Node* node) {
        while (node != root && node->parent->color == "Red") {
            Node* parent = node->parent;
            Node* grandparent = parent->parent;

            if (parent == grandparent->left) {
                Node* uncle = grandparent->right;
                if (uncle != NULL && uncle->color == "Red") {
                    parent->color = "Black";
                    uncle->color = "Black";
                    grandparent->color = "Red";
                    node = grandparent;
                } else {
                    if (node == parent->right) {
                        node = parent;
                        leftRotate(node);
                    }
                    parent->color = "Black";
                    grandparent->color = "Red";
                    rightRotate(grandparent);
                }
            } else {
                Node* uncle = grandparent->left;
                if (uncle != NULL && uncle->color == "Red") {
                    parent->color = "Black";
                    uncle->color = "Black";
                    grandparent->color = "Red";
                    node = grandparent;
                } else {
                    if (node == parent->left) {
                        node = parent;
                        rightRotate(node);
                    }
                    parent->color = "Black";
                    grandparent->color = "Red";
                    leftRotate(grandparent);
                }
            }
        }
        root->color = "Black";
    }

    void insert(string name) {
        Node* newNode = new Node(name);
        Node* y = NULL;
        Node* x = root;

        while (x != NULL) {
            y = x;
            if (newNode->name < x->name)
                x = x->left;
            else
                x = x->right;
        }

        newNode->parent = y;
        if (y == NULL)
            root = newNode;
        else if (newNode->name < y->name)
            y->left = newNode;
        else
            y->right = newNode;

        fixInsert(newNode);
    }

    void inorder(Node* node) {
        if (node == NULL) return;
        inorder(node->left);
        cout << node->name << " (" << node->color << ") ";
        inorder(node->right);
    }

    void printTree() {
        cout << "Directory structure (Inorder Traversal): ";
        inorder(root);
        cout << endl;
    }
};

int main() {
    RedBlackTree tree;
    int choice;
    string dirName;

    do {
        cout << "\nFile System (Red-Black Tree) Menu" << endl;
        cout << "1. Insert Directory" << endl;
        cout << "2. Display Directory Structure" << endl;
        cout << "3. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch(choice) {
            case 1:
                cout << "Enter the directory name to insert: ";
                cin >> dirName;
                tree.insert(dirName);
                cout << "Directory inserted!" << endl;
                break;

            case 2:
                tree.printTree();
                break;

            case 3:
                cout << "Exiting program..." << endl;
                break;

            default:
                cout << "Invalid choice, please try again." << endl;
        }
    } while (choice != 3);

    return 0;
}
