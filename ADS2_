






























































































































































// KESHAV THAKUR
// 123B1B049
// DIVISION : A (A-3)

#include <iostream>
using namespace std;

// Node structure for AVL Tree
class Node {
public:
    string player_id;
    int score;
    Node* left;
    Node* right;
    int height;

    Node(string id, int sc) {
        player_id = id;
        score = sc;
        left = right = NULL;
        height = 1;
    }
};

class AVLTree {
public:
    Node* root;

    AVLTree() {
        root = NULL;
    }

    int getHeight(Node* root) {
        if (root == NULL) {
            return 0;
        } else {
            return root->height;
        }
    }

    int getBalance(Node* root) {
        if (root == NULL) {
            return 0;
        } else {
            return getHeight(root->left) - getHeight(root->right);
        }
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        x->right = y;
        y->left = T2;

        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        y->left = x;
        x->right = T2;

        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

        return y;
    }

    Node* insert(Node* root, string player_id, int score) {
        if (root == NULL) {
            return new Node(player_id, score);
        }

        if (score < root->score) {
            root->left = insert(root->left, player_id, score);
        } else if (score > root->score) {
            root->right = insert(root->right, player_id, score);
        } else {
            return root;
        }

        root->height = max(getHeight(root->left), getHeight(root->right)) + 1;
        int balance = getBalance(root);

        // Rebalance if needed
        if (balance > 1 && score < root->left->score)
            return rightRotate(root);

        if (balance < -1 && score > root->right->score)
            return leftRotate(root);

        if (balance > 1 && score > root->left->score) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }

        if (balance < -1 && score < root->right->score) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    Node* minValueNode(Node* root) {
        while (root->left != NULL)
            root = root->left;
        return root;
    }

    Node* remove(Node* root, string player_id, int score) {
        if (root == NULL)
            return NULL;

        if (score < root->score) {
            root->left = remove(root->left, player_id, score);
        } else if (score > root->score) {
            root->right = remove(root->right, player_id, score);
        } else {
            // Node found
            if (root->left == NULL && root->right == NULL) {
                delete root;
                return NULL;
            } else if (root->left == NULL) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == NULL) {
                Node* temp = root->left;
                delete root;
                return temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->player_id = temp->player_id;
                root->score = temp->score;
                root->right = remove(root->right, temp->player_id, temp->score);
            }
        }

        root->height = max(getHeight(root->left), getHeight(root->right)) + 1;
        int balance = getBalance(root);

        // Rebalance if needed
        if (balance > 1 && getBalance(root->left) >= 0)
            return rightRotate(root);

        if (balance > 1 && getBalance(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }

        if (balance < -1 && getBalance(root->right) <= 0)
            return leftRotate(root);

        if (balance < -1 && getBalance(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    void displayLeaderboard(Node* root) {
        if (root != NULL) {
            displayLeaderboard(root->right);
            cout << root->player_id << " : " << root->score << endl;
            displayLeaderboard(root->left);
        }
    }
};

int main() {
    AVLTree game;

    // Register players
    cout << "Registering players...\n";
    game.root = game.insert(game.root, "P1", 60);
    game.root = game.insert(game.root, "P2", 85);
    game.root = game.insert(game.root, "P3", 75);
    game.root = game.insert(game.root, "P4", 90);
    game.root = game.insert(game.root, "P5", 65);

    // Display leaderboard
    cout << "\nLeaderboard after registration:\n";
    game.displayLeaderboard(game.root);

    // Remove a player
    cout << "\nRemoving player with score 75 (P3)...\n";
    game.root = game.remove(game.root, "P3", 75);

    // Display updated leaderboard
    cout << "\nLeaderboard after removal:\n";
    game.displayLeaderboard(game.root);

    return 0;
}
